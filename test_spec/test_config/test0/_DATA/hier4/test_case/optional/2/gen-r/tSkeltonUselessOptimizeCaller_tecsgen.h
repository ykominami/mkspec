/*
 * This file was automatically generated by tecsgen.
 * This file is not intended to be edited.
 */
#ifndef tSkeltonUselessOptimizeCaller_TECSGEN_H
#define tSkeltonUselessOptimizeCaller_TECSGEN_H

/*
 * celltype          :  tSkeltonUselessOptimizeCaller
 * global name       :  tSkeltonUselessOptimizeCaller
 * multi-domain      :  no
 * idx_is_id(actual) :  no(no)
 * singleton         :  no
 * has_CB            :  yes
 * has_INIB          :  no
 * rom               :  no
 * CB initializer    :  yes
 */

/* global header #_IGH_# */
#include "global_tecsgen.h"

/* signature header #_ISH_# */
#include "sSig_tecsgen.h"

#ifndef TOPPERS_MACRO_ONLY

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* cell CB type definition #_CCTPO_# */
typedef struct tag_tSkeltonUselessOptimizeCaller_CB {
    /* call port #_TCP_# */
    struct tag_tSkeltonUselessOptimizeCallee_CB * const cCall;  /* TCP_4 */
    /* call port #_NEP_# */ 
}  tSkeltonUselessOptimizeCaller_CB;
/* singleton cell CB prototype declaration #_MCPB_# */
extern tSkeltonUselessOptimizeCaller_CB  tSkeltonUselessOptimizeCaller_CB_tab[];

/* celltype IDX type #_CTIX_# */
typedef struct tag_tSkeltonUselessOptimizeCaller_CB *tSkeltonUselessOptimizeCaller_IDX;

/* prototype declaration of entry port function #_EPP_# */
/* sSig */
void         tSkeltonUselessOptimizeCaller_eEnt_func(tSkeltonUselessOptimizeCaller_IDX idx);
int32_t      tSkeltonUselessOptimizeCaller_eEnt_func2(tSkeltonUselessOptimizeCaller_IDX idx, int32_t arg);
struct tagST tSkeltonUselessOptimizeCaller_eEnt_func3(tSkeltonUselessOptimizeCaller_IDX idx, struct tagST a);
#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TOPPERS_MACRO_ONLY */

/* to get the definition of CB type of referenced celltype for optimization #_ICT_# */
#ifndef  TOPPERS_CB_TYPE_ONLY
#define  tSkeltonUselessOptimizeCaller_CB_TYPE_ONLY
#define TOPPERS_CB_TYPE_ONLY
#endif  /* TOPPERS_CB_TYPE_ONLY */
#include "tSkeltonUselessOptimizeCallee_tecsgen.h"
#ifdef  tSkeltonUselessOptimizeCaller_CB_TYPE_ONLY
#undef TOPPERS_CB_TYPE_ONLY
#endif /* tSkeltonUselessOptimizeCaller_CB_TYPE_ONLY */
#ifndef TOPPERS_CB_TYPE_ONLY

#define tSkeltonUselessOptimizeCaller_ID_BASE        (1)  /* ID Base  #_NIDB_# */
#define tSkeltonUselessOptimizeCaller_N_CELL        (2)  /*  number of cells  #_NCEL_# */

/* IDX validation macro #_CVI_# */
#define tSkeltonUselessOptimizeCaller_VALID_IDX(IDX) (1)

/* optional call port test macro #_TOCP_# */
#define tSkeltonUselessOptimizeCaller_is_cCall_joined(p_that) \
	  (1)

/* celll CB macro #_GCB_# */
#define tSkeltonUselessOptimizeCaller_GET_CELLCB(idx) (idx)
#ifndef TECSFLOW
 /* call port function macro #_CPM_# */
#define tSkeltonUselessOptimizeCaller_cCall_func( p_that ) \
	  tSkeltonUselessOptimizeCallee_eEnt_func( \
	   (p_that)->cCall )
#define tSkeltonUselessOptimizeCaller_cCall_func2( p_that, arg ) \
	  tSkeltonUselessOptimizeCallee_eEnt_func2( \
	   (p_that)->cCall, (arg) )
#define tSkeltonUselessOptimizeCaller_cCall_func3( p_that, a ) \
	  tSkeltonUselessOptimizeCallee_eEnt_func3( \
	   (p_that)->cCall, (a) )

#else  /* TECSFLOW */
#define tSkeltonUselessOptimizeCaller_cCall_func( p_that ) \
	  (p_that)->cCall.func__T( \
 )
#define tSkeltonUselessOptimizeCaller_cCall_func2( p_that, arg ) \
	  (p_that)->cCall.func2__T( \
 (arg) )
#define tSkeltonUselessOptimizeCaller_cCall_func3( p_that, a ) \
	  (p_that)->cCall.func3__T( \
 (a) )

#endif /* TECSFLOW */
#endif /* TOPPERS_CB_TYPE_ONLY */

#ifndef TOPPERS_MACRO_ONLY

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* prototype declaration of entry port function (referenced when VMT useless optimise enabled) #_EPSP_# */

#ifndef TOPPERS_CB_TYPE_ONLY

#endif /* TOPPERS_CB_TYPE_ONLY */

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TOPPERS_MACRO_ONLY */

#ifndef TOPPERS_CB_TYPE_ONLY

/* IDX validation macro (abbrev.) #_CVIA_# */
#define VALID_IDX(IDX)  tSkeltonUselessOptimizeCaller_VALID_IDX(IDX)


/* cell CB macro (abbrev) #_GCBA_# */
#define GET_CELLCB(idx)  tSkeltonUselessOptimizeCaller_GET_CELLCB(idx)

/* CELLCB type (abbrev) #_CCT_# */
#define CELLCB	tSkeltonUselessOptimizeCaller_CB

/* celltype IDX type (abbrev) #_CTIXA_# */
#define CELLIDX	tSkeltonUselessOptimizeCaller_IDX

/* call port function macro (abbrev) #_CPMA_# */
#define cCall_func( ) \
          ((void)p_cellcb, tSkeltonUselessOptimizeCaller_cCall_func( p_cellcb ))
#define cCall_func2( arg ) \
          ((void)p_cellcb, tSkeltonUselessOptimizeCaller_cCall_func2( p_cellcb, arg ))
#define cCall_func3( a ) \
          ((void)p_cellcb, tSkeltonUselessOptimizeCaller_cCall_func3( p_cellcb, a ))



/* optional call port test macro (abbrev) #_TOCPA_# */
#define is_cCall_joined()\
		tSkeltonUselessOptimizeCaller_is_cCall_joined(p_cellcb)

/* entry port function macro (abbrev) #_EPM_# */
#define eEnt_func        tSkeltonUselessOptimizeCaller_eEnt_func
#define eEnt_func2       tSkeltonUselessOptimizeCaller_eEnt_func2
#define eEnt_func3       tSkeltonUselessOptimizeCaller_eEnt_func3

/* iteration code (FOREACH_CELL) #_FEC_# */
#define FOREACH_CELL(i,p_cb)   \
    for( (i) = 0; (i) < tSkeltonUselessOptimizeCaller_N_CELL; (i)++ ){ \
       (p_cb) = &tSkeltonUselessOptimizeCaller_CB_tab[i];

#define END_FOREACH_CELL   }

/* CB initialize macro #_CIM_# */
#define INITIALIZE_CB(p_that)	(void)(p_that);
#define SET_CB_INIB_POINTER(i,p_that)\
	/* empty */
#endif /* TOPPERS_CB_TYPE_ONLY */

#ifndef TOPPERS_MACRO_ONLY

#endif /* TOPPERS_MACRO_ONLY */

#endif /* tSkeltonUselessOptimizeCaller_TECSGENH */
