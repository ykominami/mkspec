/*
 * This file was automatically generated by tecsgen.
 * This file is not intended to be edited.
 */
#ifndef tMainForComp_TECSGEN_H
#define tMainForComp_TECSGEN_H

/*
 * celltype          :  tMainForComp
 * global name       :  tMainForComp
 * multi-domain      :  yes
 * idx_is_id(actual) :  yes(yes)
 * singleton         :  no
 * has_CB            :  yes
 * has_INIB          :  yes
 * rom               :  yes
 * CB initializer    :  yes
 */

/* global header #_IGH_# */
#include "global_tecsgen.h"

/* signature header #_ISH_# */
#include "sTaskBody_tecsgen.h"
#include "sHello_tecsgen.h"
#include "sTalkerSelector_tecsgen.h"

#ifndef TOPPERS_MACRO_ONLY

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* cell INIB type definition #_CIP_# */
typedef const struct tag_tMainForComp_INIB {
    /* call port #_TCP_# */
    struct tag_sHello_VDES const*cDefaultTalker; /* TCP_2 */
    struct tag_sHello_VDES *cTalker_init_; /* TCP_2 */
    /* call port #_NEP_# */ 
}  tMainForComp_INIB;
/* cell CB type definition #_CCTPA_# */
typedef struct tag_tMainForComp_CB {
    tMainForComp_INIB  *_inib;
    /* call port #_TCP_# */
    struct tag_sHello_VDES *cTalker; /* TCP_2 */
    /* call port #_NEP_# */ 
}  tMainForComp_CB;
/* singleton cell CB prototype declaration #_MCPP_# */
extern tMainForComp_CB  *const tMainForComp_CB_ptab[];
extern tMainForComp_CB  rComposite_CompMain_Main_CB;

/* celltype IDX type #_CTIX_# */
typedef ID tMainForComp_IDX;

/* prototype declaration of entry port function #_EPP_# */
/* sTaskBody */
void         tMainForComp_eMain_main(tMainForComp_IDX idx);
#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TOPPERS_MACRO_ONLY */

/* to get the definition of CB type of referenced celltype for optimization #_ICT_# */
#ifndef  TOPPERS_CB_TYPE_ONLY
#define  tMainForComp_CB_TYPE_ONLY
#define TOPPERS_CB_TYPE_ONLY
#endif  /* TOPPERS_CB_TYPE_ONLY */
#include "tTalkerSelector_tecsgen.h"
#ifdef  tMainForComp_CB_TYPE_ONLY
#undef TOPPERS_CB_TYPE_ONLY
#endif /* tMainForComp_CB_TYPE_ONLY */
#ifndef TOPPERS_CB_TYPE_ONLY

#define tMainForComp_ID_BASE        (1)  /* ID Base  #_NIDB_# */
#define tMainForComp_N_CELL         (1)  /*  number of cells  #_NCEL_# */

/* IDX validation macro #_CVI_# */
#define tMainForComp_VALID_IDX(IDX) (tMainForComp_ID_BASE <= (IDX) && (IDX) < tMainForComp_ID_BASE+tMainForComp_N_CELL)

/* optional call port test macro #_TOCP_# */
#define tMainForComp_is_cTalker_joined(p_that) \
	  ((p_that)->cTalker!=0)

/* celll CB macro #_GCB_# */
#define tMainForComp_GET_CELLCB(idx) (tMainForComp_CB_ptab[(idx) - tMainForComp_ID_BASE])
#ifndef TECSFLOW
 /* call port function macro #_CPM_# */
#define tMainForComp_cDefaultTalker_hello( p_that ) \
	  (p_that)->_inib->cDefaultTalker->VMT->hello__T( \
	   (p_that)->_inib->cDefaultTalker )
#define tMainForComp_cTalker_hello( p_that ) \
	  (p_that)->cTalker->VMT->hello__T( \
	   (p_that)->cTalker )
#define tMainForComp_cTalkerSelector_getTalker( p_that, talker, i ) \
	  tTalkerSelector_eTalkerSelector_getTalker( \
	   &tTalkerSelector_INIB_tab[1], (talker), (i) )
#define tMainForComp_cTalkerSelector_getNTalker( p_that, n ) \
	  tTalkerSelector_eTalkerSelector_getNTalker( \
	   &tTalkerSelector_INIB_tab[1], (n) )

#else  /* TECSFLOW */
#define tMainForComp_cDefaultTalker_hello( p_that ) \
	  (p_that)->cDefaultTalker.hello__T( \
 )
#define tMainForComp_cTalker_hello( p_that ) \
	  (p_that)->cTalker.hello__T( \
 )
#define tMainForComp_cTalkerSelector_getTalker( p_that, talker, i ) \
	  (p_that)->cTalkerSelector.getTalker__T( \
 (talker), (i) )
#define tMainForComp_cTalkerSelector_getNTalker( p_that, n ) \
	  (p_that)->cTalkerSelector.getNTalker__T( \
 (n) )

#endif /* TECSFLOW */
#endif /* TOPPERS_CB_TYPE_ONLY */

#ifndef TOPPERS_MACRO_ONLY

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* prototype declaration of entry port function (referenced when VMT useless optimise enabled) #_EPSP_# */
/* eMain */
void           tMainForComp_eMain_main_skel( const struct tag_sTaskBody_VDES *epd);

#ifndef TOPPERS_CB_TYPE_ONLY

/* refer to descriptor function #_CRD_# */
/* [ref_desc] cDefaultTalker */
Inline Descriptor( sHello )
tMainForComp_cDefaultTalker_refer_to_descriptor( tMainForComp_CB  *p_that )
{
    Descriptor( sHello )  des;
    tMainForComp_CB *p_cellcb = p_that;
    /* cast is ncecessary for removing 'const'  */
    des.vdes = (struct tag_sHello_VDES *)p_cellcb->_inib->cDefaultTalker;
    return des;
}

/* set descriptor function #_SDF_# */
/* [dynamic] cTalker */
Inline void
tMainForComp_cTalker_set_descriptor( tMainForComp_CB  *p_that, Descriptor( sHello ) des )
{
    tMainForComp_CB *p_cellcb = p_that;
    assert( des.vdes != NULL );
    (p_cellcb)->cTalker = des.vdes;
}

/* [dynamic,optional] cTalker */
Inline void
tMainForComp_cTalker_unjoin( tMainForComp_CB  *p_that  )
{
    tMainForComp_CB *p_cellcb = p_that;
    (p_cellcb)->cTalker = NULL;
}

#endif /* TOPPERS_CB_TYPE_ONLY */

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TOPPERS_MACRO_ONLY */

#ifndef TOPPERS_CB_TYPE_ONLY

/* IDX validation macro (abbrev.) #_CVIA_# */
#define VALID_IDX(IDX)  tMainForComp_VALID_IDX(IDX)


/* cell CB macro (abbrev) #_GCBA_# */
#define GET_CELLCB(idx)  tMainForComp_GET_CELLCB(idx)

/* CELLCB type (abbrev) #_CCT_# */
#define CELLCB	tMainForComp_CB

/* celltype IDX type (abbrev) #_CTIXA_# */
#define CELLIDX	tMainForComp_IDX

/* call port function macro (abbrev) #_CPMA_# */
#define cDefaultTalker_hello( ) \
          tMainForComp_cDefaultTalker_hello( p_cellcb )
#define cTalker_hello( ) \
          tMainForComp_cTalker_hello( p_cellcb )
#define cTalkerSelector_getTalker( talker, i ) \
          ((void)p_cellcb, tMainForComp_cTalkerSelector_getTalker( p_cellcb, talker, i ))
#define cTalkerSelector_getNTalker( n ) \
          ((void)p_cellcb, tMainForComp_cTalkerSelector_getNTalker( p_cellcb, n ))


/* refer to descriptor macro (abbrev) #_CRDA_# */
#define cDefaultTalker_refer_to_descriptor()\
          tMainForComp_cDefaultTalker_refer_to_descriptor( p_cellcb )
#define cDefaultTalker_ref_desc()\
          cDefaultTalker_refer_to_descriptor()


/* set descriptor macro (abbrev) #_SDMA_# */
#define cTalker_set_descriptor( desc )\
          tMainForComp_cTalker_set_descriptor( p_cellcb, desc )
#define cTalker_unjoin(  )\
          tMainForComp_cTalker_unjoin( p_cellcb )

/* optional call port test macro (abbrev) #_TOCPA_# */
#define is_cTalker_joined()\
		tMainForComp_is_cTalker_joined(p_cellcb)

/* entry port function macro (abbrev) #_EPM_# */
#define eMain_main       tMainForComp_eMain_main

/* iteration code (FOREACH_CELL) #_FEC_# */
#define FOREACH_CELL(i,p_cb)   \
    for( (i) = 0; (i) < tMainForComp_N_CELL; (i)++ ){ \
       (p_cb) = tMainForComp_CB_ptab[i];

#define END_FOREACH_CELL   }

/* CB initialize macro #_CIM_# */
#define INITIALIZE_CB(p_that)\
	(p_that)->cTalker = (p_that)->_inib->cTalker_init_;

#define SET_CB_INIB_POINTER(i,p_that)\
	(p_that)->_inib = tMainForComp_INIB_ptab[(i)];

#endif /* TOPPERS_CB_TYPE_ONLY */

#ifndef TOPPERS_MACRO_ONLY

#endif /* TOPPERS_MACRO_ONLY */

#endif /* tMainForComp_TECSGENH */
