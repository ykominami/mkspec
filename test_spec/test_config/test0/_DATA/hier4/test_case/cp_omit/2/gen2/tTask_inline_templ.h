#ifndef tTask__INLINE_H
#define tTask__INLINE_H

/*
 * This file was automatically generated by tecsgen.
 * Move and rename like below before editing,
 *   gen/tTask_inline_template.h => src/tTask_inline.h
 * to avoid to be overwritten by tecsgen.
 */
/* #[<PREAMBLE>]#
 * Don't edit the comments between #[<...>]# and #[</...>]#
 * These comment are used by tecsmerege when merging.
 *
 * attr access macro #_CAAM_#
 * attribute        ATR              ATTR_attribute  
 * priority         PRI              ATTR_priority   
 * stackSize        size_t           ATTR_stackSize  
 * name             char_t*          ATTR_name       
 * my_thread        pthread_t        VAR_my_thread   
 * my_cond          pthread_cond_t   VAR_my_cond     
 * my_mutex         pthread_mutex_t  VAR_my_mutex    
 * state            int_t            VAR_state       
 *
 * call port function #_TCPF_#
 * call port: cTaskBody signature: sTaskBody context:task
 *   void           cTaskBody_main( );
 * call port: cExceptionBody signature: sTaskExceptionBody context:task optional:true
 *   bool_t     is_cExceptionBody_joined()                     check if joined
 *   void           cExceptionBody_main( TEXPTN pattern );
 *
 * #[</PREAMBLE>]# */

/* entry port function #_TEPF_# */
/* #[<ENTRY_PORT>]# eTask
 * entry port: eTask
 * signature:  sTask
 * context:    task
 * #[</ENTRY_PORT>]# */

/* #[<ENTRY_FUNC>]# eTask_activate
 * name:         eTask_activate
 * global_name:  tTask_eTask_activate
 * oneway:       false
 * #[</ENTRY_FUNC>]# */
Inline ER
eTask_activate(CELLIDX idx)
{
	ER		ercd = E_OK;
	CELLCB	*p_cellcb;
	if (VALID_IDX(idx)) {
		p_cellcb = GET_CELLCB(idx);
	}
	else {
		return(E_ID);
	} /* end if VALID_IDX(idx) */

	/* Put statements here #_TEFB_# */

	return(ercd);
}

/* #[<ENTRY_FUNC>]# eTask_suspend
 * name:         eTask_suspend
 * global_name:  tTask_eTask_suspend
 * oneway:       false
 * #[</ENTRY_FUNC>]# */
Inline ER
eTask_suspend(CELLIDX idx)
{
	ER		ercd = E_OK;
	CELLCB	*p_cellcb;
	if (VALID_IDX(idx)) {
		p_cellcb = GET_CELLCB(idx);
	}
	else {
		return(E_ID);
	} /* end if VALID_IDX(idx) */

	/* Put statements here #_TEFB_# */

	return(ercd);
}

/* #[<ENTRY_FUNC>]# eTask_resume
 * name:         eTask_resume
 * global_name:  tTask_eTask_resume
 * oneway:       false
 * #[</ENTRY_FUNC>]# */
Inline ER
eTask_resume(CELLIDX idx)
{
	ER		ercd = E_OK;
	CELLCB	*p_cellcb;
	if (VALID_IDX(idx)) {
		p_cellcb = GET_CELLCB(idx);
	}
	else {
		return(E_ID);
	} /* end if VALID_IDX(idx) */

	/* Put statements here #_TEFB_# */

	return(ercd);
}

/* #[<POSTAMBLE>]#
 *   Put non-entry functions below.
 * #[</POSTAMBLE>]#*/

#endif /* tTask_INLINEH */
