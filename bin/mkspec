#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'mkspec'
require 'pp'
# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

# (If you use this, don't forget to add pry to your Gemfile!)
# require 'pry'
# Pry.start

# require 'irb'
# IRB.start(__FILE__)
def output_error_message(mes)
  pp(mes)
  Mkspec::Loggerxcm.error(mes)
  Mkspec::Loggerxcmcli.error(mes)
  Mkspec::Loggerxcmspec.error(mes)
end

exit_code = nil
mkscript = Mkspec::Mkscript.new(ARGV)
exit_code = mkscript.check_state_and_show_useage_and_state_message
exit(exit_code) if exit_code
begin
  mkscript.create_files
rescue Mkspec::MkspecDebugError => e
  output_error_message(e.message)
  output_error_message(e.backtrace.join("\n"))
  if Mkspec::STATE.success?
     puts "1"
   exit_code = Mkspec::MKSPEC_DEBUG_ERROR
  else
    puts "2"
    exit_code = Mkspec::STATE.show_message
  end
  # exit(exit_code)
rescue Mkspec::MkspecAppError => e
  output_error_message(e.message)
  output_error_message(e.backtrace.join("\n"))
  if Mkspec::STATE.success?
    puts "3"
    exit_code = Mkspec::MKSPEC_APP_ERROR
  else
    puts "4"
    exit_code = Mkspec::STATE.show_message
  end
rescue => e
  output_error_message("###################### 1")
  output_error_message(e.message)
  output_error_message(e.backtrace.join("\n"))
  puts "5"
  exit_code = Mkspec::STATE.show_message
end
exit_code = 0 unless exit_code
exit(exit_code)
