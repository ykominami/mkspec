#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "mkspec"

require 'debug'
# require 'mkspec/loggerxcm'

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

# (If you use this, don't forget to add pry to your Gemfile!)
# require 'pry'
# Pry.start

# require 'irb'
# IRB.start(__FILE__)
def output_error_message(mes)
  if mes.kind_of?(Array)
    mes.map { |x| puts x }
  elsif mes.kind_of?(String)
    puts mes
  else
    pp mes
  end
  Mkspec::Loggerxcmspec.error(mes)
end

mkscript = Mkspec::Mkscript.new
mkscript.check_cli_options(ARGV)
exit_code = mkscript.check_state_and_show_useage_and_state_message
exit(exit_code) if exit_code

mkscript.init

begin
  mkscript.create_files
rescue Mkspec::MkspecDebugError => exc
  output_error_message(exc.message)
  output_error_message(exc.backtrace)
  if Mkspec::STATE.success?
    Loggerxcm.fatal("1")
    exit_code = Mkspec::MKSPEC_DEBUG_ERROR
  else
    Mkspec::Loggerxcm.fatal("2")
    exit_code = Mkspec::STATE.show_message
  end
  # exit(exit_code)
rescue Mkspec::MkspecAppError => exc
  output_error_message(exc.message)
  output_error_message(exc.backtrace)
  if Mkspec::STATE.success?
    Loggerxcm.fatal("3")
    exit_code = Mkspec::MKSPEC_APP_ERROR
  else
    Loggerxcm.fatal("4")
    exit_code = Mkspec::STATE.show_message
  end
rescue StandardError => exc
  output_error_message("###################### 1")
  output_error_message(exc.message)
  output_error_message(exc.backtrace)
  Loggerxcm.fatal("5")
  exit_code = Mkspec::STATE.show_message
end
exit_code ||= 0
exit(exit_code)
