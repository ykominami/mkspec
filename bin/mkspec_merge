#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'mkspec'
require 'pathname'

module Mkspec
  class YamlConfig
    attr_reader :hash, :hash_by_file, :pn

    @excludes = %w!path desc rspec_describe_head rspec_describe_end rspec_describe_context_end!

    class << self
      def valid_key?(name)
        !@excludes.include?(name)
      end
    end

    def initialize(path)
      @pn = Pathname.new(path)
      @hash_by_file = {}
      @hash = {}
    end

    def get_all_rbfile
      @pn.children
    end

    def setup
      @pn.find do |item_pn|
        next unless item_pn.file? && item_pn.fnmatch("*.yml")

        content = Util.get_file_content(item_pn)
        hashx = YAML.safe_load(content)
        hashx.map do |k, v|
          if YamlConfig.valid_key?(k)
            @hash[k] = v
          end
        end
        @hash_by_file[item_pn] = hashx
      end
    end
  end

  class YamlX
    def initialize(dir1, dir2)
      @yc1, @yc2 = [dir1, dir2].map do |x|
        yc = YamlConfig.new(x)
        yc.setup
        yc
      end
    end

    def merge_sub(src_hash, dest_hash)
      src_hash.map do |src_k, src_v|
        Loggerxcm.show("src_k=#{src_k}")

        if src_v.instance_of?(Hash) && dest_hash[src_k] && dest_hash[src_k].instance_of?(Hash)
          merge_sub(src_v, dest_hash[src_k])
        else
          case src_k
          when "option_list", "cdlfile"
            dest_hash[src_k] = src_v
          end
        end
      end
    end

    def merge
      @hash = {}
      merge_sub(@yc1.hash, @yc2.hash)
    end

    def show
      @yc1.hash_by_file.map do |k, v|
        Loggerxcm.show( "# #{k}")
        v.map do |k2, v2|
          Loggerxcm.show("## #{k2}")
          Loggerxcm.show(v2)
        end
      end
    end

    def output
      @yc2.hash_by_file.map do |k, v|
        File.write(k, YAML.dump(v))
      end
    end
  end
end

spec_dir_1 = ARGV[0]
spec_dir_2 = ARGV[1]

puts spec_dir_1
puts spec_dir_2

yamlx = Mkspec::YamlX.new(spec_dir_1, spec_dir_2)

yamlx.merge

yamlx.output
